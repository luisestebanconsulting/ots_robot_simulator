#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


# Grammar for parsing robot simulator commands
#
# @author   Luis Esteban M.Sc., M.Teach

class Grammar < Racc::Parser

module_eval(<<'...end grammar.racc/module_eval...', 'grammar.racc', 81)
  
  # Starts parsing the tokens provide by the tokenizer
  #
  # @param    tokenizer   [Racc::Parser]      The tokenizer
  # @param    yydebug     [Boolean]           Whether to turn on debugging in the parser
  # @return               [Object]            Result of the start rule
  
  def parse(tokenizer, yydebug = false)
    Simulator.log 'Grammar starting', :debug
    @yydebug   = yydebug
    @tokenizer = tokenizer
    
    do_parse
  end
  
  
  # Gets the next token from the tokenizer
  
  def next_token
    token = @tokenizer.next_token
    
    Simulator.log "token = #{token.inspect}", :debug
    
    token
  end
  
  
  # Specifies the new target to receive messages during parsing
  #
  # @param    new_target    [Object]        The object to receive messages
  
  def target=(new_target)
    
    Simulator.log "new target = #{new_target.inspect}", :debug
    
    @target = new_target
  end
  
  
  # Outputs an error message for syntax errors
  # 
  # @param    t       [Integer]         ID of the token causing the error
  # @param    val     [Object]          The value of the token
  # @param    vstack  [Array<Object>]   Stack of token values
  # @see      {racc/parser}
  
  def on_error(t, val, vstack)
    Simulator.error "Syntax error in command: #{token_to_str(t) || '?'} (#{val.inspect}) unexpected"
  end
  
  
...end grammar.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    14,     9,    10,    11,    12,    13,    14,     9,    10,    11,
    12,    13,    28,    29,    30,    31,    21,    18,    19,    20,
    17,    22,    23,    24,    25,    26,    15,    32 ]

racc_action_check = [
     0,     0,     0,     0,     0,     0,     2,     2,     2,     2,
     2,     2,    26,    26,    26,    26,    13,    10,    11,    12,
     9,    14,    15,    17,    24,    25,     1,    27 ]

racc_action_pointer = [
    -1,    26,     5,   nil,   nil,   nil,   nil,   nil,   nil,     9,
     4,     5,     6,     3,     8,    22,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,    13,    11,     5,    14,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -1,   -19,    -1,    -3,    -4,    -5,    -6,    -7,    -8,   -19,
   -19,   -19,   -19,   -19,   -19,   -19,    -2,   -19,   -10,   -11,
   -12,   -13,   -14,    33,   -19,   -19,   -19,   -19,   -15,   -16,
   -17,   -18,    -9 ]

racc_goto_table = [
     1,    27,    16 ]

racc_goto_check = [
     1,     9,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -25 ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6,     7,     8,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 16, :_reduce_none,
  2, 16, :_reduce_none,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  7, 18, :_reduce_9,
  2, 19, :_reduce_10,
  2, 20, :_reduce_11,
  2, 21, :_reduce_12,
  2, 22, :_reduce_13,
  2, 23, :_reduce_14,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none ]

racc_reduce_n = 19

racc_shift_n = 33

racc_token_table = {
  false => 0,
  :error => 1,
  :PLACE => 2,
  :REPORT => 3,
  :LEFT => 4,
  :RIGHT => 5,
  :MOVE => 6,
  :NORTH => 7,
  :EAST => 8,
  :SOUTH => 9,
  :WEST => 10,
  :NUMBER => 11,
  :IDENTIFIER => 12,
  :EOL => 13,
  "," => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PLACE",
  "REPORT",
  "LEFT",
  "RIGHT",
  "MOVE",
  "NORTH",
  "EAST",
  "SOUTH",
  "WEST",
  "NUMBER",
  "IDENTIFIER",
  "EOL",
  "\",\"",
  "$start",
  "commands",
  "command",
  "place_command",
  "report_command",
  "left_command",
  "right_command",
  "move_command",
  "error_command",
  "direction" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'grammar.racc', 38)
  def _reduce_9(val, _values, result)
                                  @target.place_command(Vector[val[1],val[3]],val[5])
                            
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.racc', 43)
  def _reduce_10(val, _values, result)
                                  @target.report_command
                            
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.racc', 48)
  def _reduce_11(val, _values, result)
                                  @target.left_command
                            
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.racc', 53)
  def _reduce_12(val, _values, result)
                                  @target.right_command
                            
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.racc', 58)
  def _reduce_13(val, _values, result)
                                  @target.move_command
                            
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.racc', 63)
  def _reduce_14(val, _values, result)
                                  yyerrok
                            
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Grammar


