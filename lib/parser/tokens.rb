#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "lib/parser/tokens.rex".
#++

require 'racc/parser'
#
#   tokens.rex     - Lexical analyser for Robot Commands
#
#     Luis Esteban    10 May 2015
#       Created
#


# The Lexical Analyser/Tokenizer class for Robot Commands.
#
# @author   Luis Esteban M.Sc., M.Teach

require 'racc/parser'

COMMANDS    = %w{PLACE REPORT LEFT RIGHT MOVE}
DIRECTIONS  = %w{NORTH EAST SOUTH WEST}

KEYWORDS    = (COMMANDS + DIRECTIONS).sort

class Tokenizer < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/( *\n)+/))
         action { eol text        }

      when (text = @ss.scan(/\s+/))
         action {                 }

      when (text = @ss.scan(/PLACE/))
         action { command text    }

      when (text = @ss.scan(/REPORT/))
         action { command text    }

      when (text = @ss.scan(/LEFT/))
         action { command text    }

      when (text = @ss.scan(/RIGHT/))
         action { command text    }

      when (text = @ss.scan(/MOVE/))
         action { command text    }

      when (text = @ss.scan(/NORTH/))
         action { symbol text     }

      when (text = @ss.scan(/EAST/))
         action { symbol text     }

      when (text = @ss.scan(/SOUTH/))
         action { symbol text     }

      when (text = @ss.scan(/WEST/))
         action { symbol text     }

      when (text = @ss.scan(/-?\d+/))
         action { number text     }

      when (text = @ss.scan(/[a-zA-Z_][a-zA-Z0-9_]*/))
         action { identifier text }

      when (text = @ss.scan(/./))
         action { raw text        }

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

  def command(str)
    [str.to_sym, str]
  end
  def symbol(str)
    [str.to_sym, str.downcase.to_sym]
  end
  def number(str)
    [:NUMBER, str.to_i]
  end
  def identifier(str)
    [:IDENTIFIER, str]
  end
  def raw(str)
    [str, str]
  end
  def eol(str)
    [:EOL, str]
  end
  def next_token
    if @interactive
      if @ss.nil? or @ss.eos?
        line = Readline.readline("> ", true)
        Simulator.log "line = #{line.inspect}", :debug
        return [false, '$end'] unless line
        @ss = StringScanner.new(line + "\n")
      end
    end
    return [false, '$end'] if @ss.eos?
    until token = _next_token or @ss.eos?; end
    Simulator.log "next token = #{token.inspect}", :debug
    token
  end
  def interactive
    @interactive = true
    @lineno      = 1
    @state       = nil
    Readline.completion_append_character = " "
    Readline.completion_proc             = ->(s){
      KEYWORDS.grep(/^#{Regexp.escape(s)}/)
    }
  end
  def tokenize
    tokens = []
    while (token = next_token) != [false, '$end']
      tokens << token
    end
    tokens
  end
end # class

